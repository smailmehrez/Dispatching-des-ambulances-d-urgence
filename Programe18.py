# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import csv
import sys
import math
import time
import random
import numpy as np
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCan
from matplotlib.figure import Figure


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(580, 10, 890, 81))
        font = QtGui.QFont()
        font.setFamily("URW Bookman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(52, 101, 164);")
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(70, 90, 1761, 7))
        font = QtGui.QFont()
        font.setPointSize(64)
        self.line.setFont(font)
        self.line.setStyleSheet("color: rgb(52, 101, 164);\n"
                                "background-color: rgb(52, 101, 164);")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(1110, 120, 7, 481))
        self.line_2.setStyleSheet("background-color: rgb(52, 101, 164);")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(120, 140, 120, 51))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("QLabel{\n"
                                   "    color: rgb(255, 155, 1);\n"
                                   "    font-size: 44px;\n"
                                   "}")
        self.label_2.setObjectName("label_2")
        self.Cmanu = QtWidgets.QRadioButton(self.centralwidget)
        self.Cmanu.setGeometry(QtCore.QRect(300, 160, 125, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.Cmanu.setFont(font)
        self.Cmanu.setStyleSheet("color: rgb(1, 92, 255);")
        self.Cmanu.setCheckable(True)
        self.Cmanu.setChecked(False)
        self.Cmanu.setAutoRepeat(False)
        self.Cmanu.setObjectName("Cmanu")
        self.Cauto = QtWidgets.QRadioButton(self.centralwidget)
        self.Cauto.setGeometry(QtCore.QRect(460, 160, 210, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.Cauto.setFont(font)
        self.Cauto.setStyleSheet("color: rgb(1, 92, 255);")
        self.Cauto.setIconSize(QtCore.QSize(25, 27))
        self.Cauto.setChecked(True)
        self.Cauto.setAutoRepeat(False)
        self.Cauto.setObjectName("Cauto")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(1230, 260, 231, 251))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_9 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Umpush")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("\n"
                                   "color: rgb(255, 155, 1);")
        self.label_9.setObjectName("label_9")
        # --------------------------------------------------------------------------
        self.verticalLayout_3.addWidget(self.label_9)
        self.label_10 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_10.setObjectName("label_10")
        self.verticalLayout_3.addWidget(self.label_10)
        self.label_11 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_11.setObjectName("label_11")
        self.verticalLayout_3.addWidget(self.label_11)
        self.label_12 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_12.setObjectName("label_12")
        self.verticalLayout_3.addWidget(self.label_12)
        self.layoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_2.setGeometry(QtCore.QRect(1500, 250, 171, 271))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.lineEdit_6.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.verticalLayout_4.addWidget(self.lineEdit_6)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.lineEdit_7.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.verticalLayout_4.addWidget(self.lineEdit_7)
        self.lineEdit_8 = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.lineEdit_8.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.verticalLayout_4.addWidget(self.lineEdit_8)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.lineEdit_9.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.verticalLayout_4.addWidget(self.lineEdit_9)
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(70, 620, 1761, 7))
        font = QtGui.QFont()
        font.setPointSize(64)
        self.line_3.setFont(font)
        self.line_3.setStyleSheet("color: rgb(52, 101, 164);\n"
                                  "background-color: rgb(52, 101, 164);")
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(1570, 560, 241, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:20px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QPushButton:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.pushButton.setObjectName("pushButton")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(180, 690, 100, 41))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("color: rgb(1, 92, 255);")
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(350, 690, 115, 41))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(25)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("color: rgb(1, 92, 255);")
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(60, 770, 90, 16))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(80, 790, 80, 30))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("color: rgb(255, 155, 1); font-size:25px;")
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(65, 886, 100, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("color: rgb(255, 155, 1); font-size:25px;")
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(45, 930, 100, 17))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_18.setObjectName("label_18")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(570, 680, 7, 311))
        self.line_4.setStyleSheet("background-color: rgb(52, 101, 164);")
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(1180, 140, 661, 91))
        self.widget.setObjectName("widget")
        self.label_8 = QtWidgets.QLabel(self.widget)
        self.label_8.setGeometry(QtCore.QRect(10, 10, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("QLabel{\n"
                                   "    color: rgb(255, 155, 1);\n"
                                   "    font-size: 44px;\n"
                                   "}")
        self.label_8.setObjectName("label_8")
        self.Sanu = QtWidgets.QRadioButton(self.widget)
        self.Sanu.setGeometry(QtCore.QRect(200, 30, 125, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.Sanu.setFont(font)
        self.Sanu.setStyleSheet("color: rgb(1, 92, 255);")
        self.Sanu.setCheckable(True)
        self.Sanu.setChecked(False)
        self.Sanu.setAutoRepeat(False)
        self.Sanu.setObjectName("Sanu")
        self.radioButton_4 = QtWidgets.QRadioButton(self.widget)
        self.radioButton_4.setGeometry(QtCore.QRect(360, 30, 210, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setStyleSheet("color: rgb(1, 92, 255);")
        self.radioButton_4.setIconSize(QtCore.QSize(25, 27))
        self.radioButton_4.setChecked(True)
        self.radioButton_4.setAutoRepeat(False)
        self.radioButton_4.setObjectName("radioButton_4")
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(140, 280, 116, 251))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_3 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Umpush")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("\n"
                                   "color: rgb(255, 155, 1);")
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_6.setObjectName("label_6")
        self.verticalLayout.addWidget(self.label_6)
        self.label_7 = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color: rgb(255, 155, 1);")
        self.label_7.setObjectName("label_7")
        self.verticalLayout.addWidget(self.label_7)
        self.layoutWidget2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget2.setGeometry(QtCore.QRect(290, 270, 144, 271))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.lineEdit.setStyleSheet("QLineEdit{\n"
                                    "    background: #E8F9FD;\n"
                                    "    border: 2px solid #2155CD; \n"
                                    "    border-radius: 10px;  \n"
                                    "    font-family: Arial;\n"
                                    "    font-size:15px;\n"
                                    "   color: #2155CD;\n"
                                    "\n"
                                    "}\n"
                                    "QLineEdit:focus{\n"
                                    "     border: 2px solid #2e2c2c; \n"
                                    "    background: #EFFFFD;\n"
                                    "    \n"
                                    "}")
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout_2.addWidget(self.lineEdit)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget2)
        self.lineEdit_2.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout_2.addWidget(self.lineEdit_2)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.layoutWidget2)
        self.lineEdit_3.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.verticalLayout_2.addWidget(self.lineEdit_3)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.layoutWidget2)
        self.lineEdit_4.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.verticalLayout_2.addWidget(self.lineEdit_4)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.layoutWidget2)
        self.lineEdit_5.setStyleSheet("QLineEdit{\n"
                                      "    background: #E8F9FD;\n"
                                      "    border: 2px solid #2155CD; \n"
                                      "    border-radius: 10px;  \n"
                                      "    font-family: Arial;\n"
                                      "    font-size:15px;\n"
                                      "   color: #2155CD;\n"
                                      "\n"
                                      "}\n"
                                      "QLineEdit:focus{\n"
                                      "     border: 2px solid #2e2c2c; \n"
                                      "    background: #EFFFFD;\n"
                                      "    \n"
                                      "}")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.verticalLayout_2.addWidget(self.lineEdit_5)
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(180, 770, 341, 61))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.textEdit = QtWidgets.QLabel(self.splitter)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setStyleSheet("font-weight:bold; font-size:18px; color: rgb(201, 103, 11);")
        self.textEdit_3 = QtWidgets.QLabel(self.splitter)
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_3.setStyleSheet("font-weight:bold; font-size:18px; color: rgb(201, 103, 11);")
        self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_2.setGeometry(QtCore.QRect(180, 880, 341, 61))
        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        self.textEdit_4 = QtWidgets.QLabel(self.splitter_2)
        self.textEdit_4.setObjectName("textEdit_4")
        self.textEdit_4.setStyleSheet("font-weight:bold; font-size:18px; color: rgb(201, 103, 11);")
        self.textEdit_2 = QtWidgets.QLabel(self.splitter_2)
        self.textEdit_2.setStyleSheet("font-weight:bold; font-size:18px; color: rgb(201, 103, 11);")
        self.textEdit_2.setObjectName("textEdit_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(810, 130, 241, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("QPushButton{\n"
                                        "    background: #E8F9FD;\n"
                                        "    border: 2px solid #2155CD; \n"
                                        "    border-radius: 10px;  \n"
                                        "    font-family: Arial;\n"
                                        "    font-size:20px;\n"
                                        "    color: #2155CD;\n"
                                        "\n"
                                        "}\n"
                                        "QPushButton:focus{\n"
                                        "     border: 2px solid #2e2c2c; \n"
                                        "     background: #EFFFFD;\n"
                                        "    \n"
                                        "}")
        self.pushButton_2.setObjectName("pushButton_2")
        # -------------------------------------------------------------------------
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(510, 230, 580, 380))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        # --------------------------------------------------------------------------
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(601, 630, 597, 339))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        # ------------------------------------------------------------------------
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(1204, 630, 596, 339))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")

        # ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
        self.horizontalLayout_11 = QtWidgets.QVBoxLayout(self.frame_2)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.figure = plt.figure()
        self.canvas2 = FigureCan(self.figure)
        self.horizontalLayout_11.addWidget(self.canvas2)
        # ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
        self.horizontalLayout_12 = QtWidgets.QVBoxLayout(self.frame_3)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")

        self.canvas3 = FigureCan(self.figure)
        self.horizontalLayout_12.addWidget(self.canvas3)
        # oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
        self.horizontalLayout_10 = QtWidgets.QVBoxLayout(self.frame)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")

        self.canvas = FigureCan(self.figure)
        self.horizontalLayout_10.addWidget(self.canvas)

        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DAU"))
        self.label.setText(_translate("MainWindow", "SMA  pour le Dispatching des ambulances d\'Urgence"))
        self.label_2.setText(_translate("MainWindow", "Carte"))
        self.Cmanu.setText(_translate("MainWindow", "Manule"))
        self.Cauto.setText(_translate("MainWindow", "Automatique"))
        self.label_9.setText(_translate("MainWindow", "Population :"))
        self.label_10.setText(_translate("MainWindow", "Itérations : "))
        self.label_11.setText(_translate("MainWindow", "Z : "))
        self.label_12.setText(_translate("MainWindow", "W1 :"))
        self.lineEdit_6.setText(_translate("MainWindow", "10"))
        self.lineEdit_7.setText(_translate("MainWindow", "100"))
        self.lineEdit_8.setText(_translate("MainWindow", "0.03"))
        self.lineEdit_9.setText(_translate("MainWindow", "0.7"))
        self.pushButton.setText(_translate("MainWindow", "Exécution"))
        self.label_13.setText(_translate("MainWindow", "SMA"))
        self.label_14.setText(_translate("MainWindow", "APSO"))
        self.label_15.setText(_translate("MainWindow", "Cout "))
        self.label_16.setText(_translate("MainWindow", "F"))
        self.label_17.setText(_translate("MainWindow", "T.E"))
        self.label_18.setText(_translate("MainWindow", "Seconde"))
        self.label_8.setText(_translate("MainWindow", "SMA"))
        self.Sanu.setText(_translate("MainWindow", "Manule"))
        self.radioButton_4.setText(_translate("MainWindow", "Automatique"))
        self.label_3.setText(_translate("MainWindow", "Zone :"))
        self.label_4.setText(_translate("MainWindow", "Patients :"))
        self.label_5.setText(_translate("MainWindow", "Critiqe : "))
        self.label_6.setText(_translate("MainWindow", "Hopital :"))
        self.label_7.setText(_translate("MainWindow", "Ambulances :"))
        self.lineEdit.setText(_translate("MainWindow", "3"))
        self.lineEdit_2.setText(_translate("MainWindow", "50"))
        self.lineEdit_3.setText(_translate("MainWindow", "8"))
        self.lineEdit_4.setText(_translate("MainWindow", "2"))
        self.lineEdit_5.setText(_translate("MainWindow", "2"))
        self.pushButton_2.setText(_translate("MainWindow", "Générer"))
        self.pushButton_2.clicked.connect(self.grafe)
        self.pushButton.clicked.connect(self.execution)



    # Affichage du graphe==> les positions des patients et hopitals et cas critiques
    def grafe(self):
        self.figure.clear()
        datatest = r'data_aler.csv'
        hopital_set = r'hopitale_set.csv'
        header1 = ["longitude_x", "laltitude_Y"]
        header = ["x", "y"]
        if (self.Cmanu.isChecked() == True):
            self.Cauto.setChecked(False)
            nb_zone = int(self.lineEdit.text())
            # creer un data set aleroire
            if nb_zone == 1:
                self.figure.clear()
                Zone_1_x = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_1_y = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_2.text()))
                Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.0001, size=1)
                Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.0001, size=1)
                cx = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_3.text()))
                cy = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_3.text()))
                plt.plot(Zone_1_x, Zone_1_y, 'bo', cx, cy, 'ro', label="les zones")
                plt.plot(Hopital_1_x, Hopital_1_y, 'gs', markersize=10, label="Hoptile")
                plt.ylabel('KM')
                plt.xlabel('KM')
                self.canvas.draw()
                with open(datatest, "w", newline="") as csv_file:
                    writer = csv.writer(csv_file, delimiter=",")
                    writer.writerow(header)
                    for i in range(int(self.lineEdit_2.text())):
                        writer.writerow([Zone_1_x[i], Zone_1_y[i]])
                with open(hopital_set, "w", newline="") as csv_file:
                    writer = csv.writer(csv_file, delimiter=",")
                    writer.writerow(header1)
                    writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])
            if nb_zone == 2:
                self.figure.clear()
                Zone_1_x = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_1_y = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_2_x = np.random.normal(loc=3.2772214, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_2_y = np.random.normal(loc=36.7869375, scale=0.009, size=int(self.lineEdit_2.text()))
                cx = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_3.text()))
                cy = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_3.text()))
                cx2 = np.random.normal(loc=3.2772214, scale=0.009, size=int(self.lineEdit_3.text()))
                cy2 = np.random.normal(loc=36.7869375, scale=0.009, size=int(self.lineEdit_3.text()))
                with open(datatest, "w", newline="") as csv_file:
                    writer = csv.writer(csv_file, delimiter=",")
                    writer.writerow(header)
                    for i in range(int(self.lineEdit_2.text())):
                        writer.writerow([Zone_1_x[i], Zone_1_y[i]])
                        writer.writerow([Zone_2_x[i], Zone_2_y[i]])
                if int(self.lineEdit_4.text()) == 1:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.0001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.0001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', cx, cy, 'ro', cx2, cy2, 'ro',
                             label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', markersize=10, label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()
                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])

                if int(self.lineEdit_4.text()) == 2:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.0001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.0001, size=1)
                    Hopital_2_x = np.random.normal(loc=3.2954276, scale=0.0001, size=1)
                    Hopital_2_y = np.random.normal(loc=36.7895974, scale=0.0001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', cx, cy, 'ro', cx2, cy2, 'ro',
                             label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', Hopital_2_x, Hopital_2_y, 'gs', markersize=10,
                             label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()
                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])
                        writer.writerow([Hopital_2_x[0], Hopital_2_y[0]])

            if nb_zone == 3:
                self.figure.clear()
                Zone_1_x = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_1_y = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_2_x = np.random.normal(loc=3.2772214, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_2_y = np.random.normal(loc=36.7869375, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_3_x = np.random.normal(loc=3.0180154, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_3_y = np.random.normal(loc=36.797076, scale=0.009, size=int(self.lineEdit_2.text()))
                cx = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_3.text()))
                cy = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_3.text()))
                cx2 = np.random.normal(loc=3.2772214, scale=0.009, size=int(self.lineEdit_3.text()))
                cy2 = np.random.normal(loc=36.7869375, scale=0.009, size=int(self.lineEdit_3.text()))
                cx3 = np.random.normal(loc=3.0180154, scale=0.009, size=int(self.lineEdit_3.text()))
                cy3 = np.random.normal(loc=36.797076, scale=0.009, size=int(self.lineEdit_3.text()))
                with open(datatest, "w", newline="") as csv_file:
                    writer = csv.writer(csv_file, delimiter=",")
                    writer.writerow(header)
                    for i in range(int(self.lineEdit_2.text())):
                        writer.writerow([Zone_1_x[i], Zone_1_y[i]])
                        writer.writerow([Zone_2_x[i], Zone_2_y[i]])
                        writer.writerow([Zone_3_x[i], Zone_3_y[i]])
                if int(self.lineEdit_4.text()) == 1:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.0001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.0001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', Zone_3_x, Zone_3_y, 'bo', cx, cy, 'ro',
                             cx2, cy2, 'ro', cx3, cy3, 'ro', label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', markersize=10, label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()
                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])

                if int(self.lineEdit_4.text()) == 2:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.0001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.0001, size=1)
                    Hopital_2_x = np.random.normal(loc=3.2954276, scale=0.0001, size=1)
                    Hopital_2_y = np.random.normal(loc=36.7895974, scale=0.0001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', Zone_3_x, Zone_3_y, 'bo', cx, cy, 'ro',
                             cx2, cy2, 'ro', cx3, cy3, 'ro', label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', Hopital_2_x, Hopital_2_y, 'gs', markersize=10,
                             label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()

                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])
                        writer.writerow([Hopital_2_x[0], Hopital_2_y[0]])
                if int(self.lineEdit_4.text()) == 3:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.0001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.0001, size=1)
                    Hopital_2_x = np.random.normal(loc=3.2954276, scale=0.0001, size=1)
                    Hopital_2_y = np.random.normal(loc=36.7895974, scale=0.0001, size=1)
                    Hopital_3_x = np.random.normal(loc=3.0485058, scale=0.0001, size=1)
                    Hopital_3_y = np.random.normal(loc=36.7946482, scale=0.0001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', Zone_3_x, Zone_3_y, 'bo', cx, cy, 'ro',
                             cx2, cy2, 'ro', cx3, cy3, 'ro', label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', Hopital_2_x, Hopital_2_y, 'gs', Hopital_3_x, Hopital_3_y,
                             'gs', markersize=10, label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()

                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])
                        writer.writerow([Hopital_2_x[0], Hopital_2_y[0]])
                        writer.writerow([Hopital_3_x[0], Hopital_3_y[0]])

            if nb_zone == 4:
                self.figure.clear()
                Zone_1_x = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_1_y = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_2_x = np.random.normal(loc=3.2772214, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_2_y = np.random.normal(loc=36.7869375, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_3_x = np.random.normal(loc=3.0180154, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_3_y = np.random.normal(loc=36.797076, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_4_x = np.random.normal(loc=3.2503686, scale=0.009, size=int(self.lineEdit_2.text()))
                Zone_4_y = np.random.normal(loc=36.7380166, scale=0.009, size=int(self.lineEdit_2.text()))
                cx = np.random.normal(loc=3.0446214, scale=0.009, size=int(self.lineEdit_3.text()))
                cy = np.random.normal(loc=36.7668931, scale=0.009, size=int(self.lineEdit_3.text()))
                cx2 = np.random.normal(loc=3.2772214, scale=0.009, size=int(self.lineEdit_3.text()))
                cy2 = np.random.normal(loc=36.7869375, scale=0.009, size=int(self.lineEdit_3.text()))
                cx3 = np.random.normal(loc=3.0180154, scale=0.009, size=int(self.lineEdit_3.text()))
                cy3 = np.random.normal(loc=36.797076, scale=0.009, size=int(self.lineEdit_3.text()))
                cx4 = np.random.normal(loc=3.2503686, scale=0.009, size=int(self.lineEdit_3.text()))
                cy4 = np.random.normal(loc=36.7380166, scale=0.009, size=int(self.lineEdit_3.text()))
                with open(datatest, "w", newline="") as csv_file:
                    writer = csv.writer(csv_file, delimiter=",")
                    writer.writerow(header)
                    for i in range(int(self.lineEdit_2.text())):
                        writer.writerow([Zone_1_x[i], Zone_1_y[i]])
                        writer.writerow([Zone_2_x[i], Zone_2_y[i]])
                        writer.writerow([Zone_3_x[i], Zone_3_y[i]])
                        writer.writerow([Zone_4_x[i], Zone_4_y[i]])

                if int(self.lineEdit_4.text()) == 1:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', Zone_3_x, Zone_3_y, 'bo', cx, cy, 'ro',
                             Zone_4_x, Zone_4_y, 'bo', cx2, cy2, 'ro',cx3,cy3,'bo',cx4,cy4,'bo', label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', markersize=10, label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()
                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])

                if int(self.lineEdit_4.text()) == 2:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.001, size=1)
                    Hopital_2_x = np.random.normal(loc=3.2954276, scale=0.001, size=1)
                    Hopital_2_y = np.random.normal(loc=36.7895974, scale=0.001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', Zone_3_x, Zone_3_y, 'bo', cx, cy, 'ro',
                             Zone_4_x, Zone_4_y, 'bo', cx2, cy2, 'ro',cx3,cy3,'bo',cx4,cy4,'bo', label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', Hopital_2_x, Hopital_2_y, 'gs', markersize=10,
                             label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()
                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])
                        writer.writerow([Hopital_2_x[0], Hopital_2_y[0]])
                if int(self.lineEdit_4.text()) == 3:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.001, size=1)
                    Hopital_2_x = np.random.normal(loc=3.2954276, scale=0.001, size=1)
                    Hopital_2_y = np.random.normal(loc=36.7895974, scale=0.001, size=1)
                    Hopital_3_x = np.random.normal(loc=3.0485058, scale=0.001, size=1)
                    Hopital_3_y = np.random.normal(loc=36.7946482, scale=0.001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', Zone_3_x, Zone_3_y, 'bo', cx, cy, 'ro',
                             Zone_4_x, Zone_4_y, 'bo', cx2, cy2, 'ro',cx3,cy3,'bo',cx4,cy4,'bo', label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', Hopital_2_x, Hopital_2_y, 'gs', Hopital_3_x,
                             Hopital_3_y, 'gs', markersize=10, label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()
                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])
                        writer.writerow([Hopital_2_x[0], Hopital_2_y[0]])
                        writer.writerow([Hopital_3_x[0], Hopital_3_y[0]])
                if int(self.lineEdit_4.text()) == 4:
                    Hopital_1_x = np.random.normal(loc=3.0522653, scale=0.001, size=1)
                    Hopital_1_y = np.random.normal(loc=36.7611882, scale=0.001, size=1)
                    Hopital_2_x = np.random.normal(loc=3.2954276, scale=0.001, size=1)
                    Hopital_2_y = np.random.normal(loc=36.7895974, scale=0.001, size=1)
                    Hopital_3_x = np.random.normal(loc=3.0485058, scale=0.001, size=1)
                    Hopital_3_y = np.random.normal(loc=36.7946482, scale=0.001, size=1)
                    Hopital_4_x = np.random.normal(loc=3.28574217, scale=0.001, size=1)
                    Hopital_4_y = np.random.normal(loc=36.7354306, scale=0.001, size=1)
                    plt.plot(Zone_1_x, Zone_1_y, 'bo', Zone_2_x, Zone_2_y, 'bo', Zone_3_x, Zone_3_y, 'bo', cx, cy, 'ro',
                             Zone_4_x, Zone_4_y, 'bo', cx2, cy2, 'ro',cx3,cy3,'bo',cx4,cy4,'bo', label="les zones")
                    plt.plot(Hopital_1_x, Hopital_1_y, 'gs', Hopital_2_x, Hopital_2_y, 'gs', Hopital_3_x, Hopital_3_y,
                             'gs', Hopital_4_x, Hopital_4_y, 'gs', markersize=10, label="Hoptile")
                    plt.ylabel('KM')
                    plt.xlabel('KM')
                    self.canvas.draw()
                    with open(hopital_set, "w", newline="") as csv_file:
                        writer = csv.writer(csv_file, delimiter=",")
                        writer.writerow(header1)
                        writer.writerow([Hopital_1_x[0], Hopital_1_y[0]])
                        writer.writerow([Hopital_2_x[0], Hopital_2_y[0]])
                        writer.writerow([Hopital_3_x[0], Hopital_3_y[0]])
                        writer.writerow([Hopital_4_x[0], Hopital_4_y[0]])
        # sinon data set existe
        elif (self.Cauto.isChecked() == True): # automatique
            self.Cmanu.setChecked(False)
            nb_zone = int(self.lineEdit.text())
            # creer un data set existe
            df = pd.read_csv(r'data.csv')
            dh = pd.read_csv(r'hopitle_data.csv')
            L_X1 = []
            L_Y1 = []
            H_X_1 = []
            H_Y_1 = []
            Critique_1_x = []
            Critique_1_y = []

            # b: blueg: green r: red c: cyan m: magenta y: yellow k: black w: white

            if nb_zone == 3:  # zone 3: 61==>101 Bab Hassen (41)
                self.figure.clear()
                L_X1.extend(df.x.loc[0:159].tolist())
                L_Y1.extend(df.y.loc[0:159].tolist())
                H_X_1.extend(dh.longitude_x.loc[0:1])
                H_Y_1.extend(dh.laltitude_Y.loc[0:1].tolist())
                Critique_1_x.extend(np.random.normal(loc=3.050384320319173, scale=0.009, size=int(self.lineEdit_3.text())))
                Critique_1_y.extend(np.random.normal(loc=36.77331120718699, scale=0.009, size=int(self.lineEdit_3.text())))
                plt.plot(Critique_1_x, Critique_1_y, 'ro', markersize=8, label="cas critique")
                plt.plot(L_X1, L_Y1, 'bo', label="les zones")
                plt.plot(H_X_1, H_Y_1, 'gs', markersize=10, label="Hopitale")
                plt.ylabel('KM')
                plt.xlabel('KM')
                self.canvas.draw()
    # Lancer le Script SMA
    def SMA(self):
        df = pd.read_csv("data_aler.csv")
        dh = pd.read_csv("hopitale_set.csv")
        nb_zone = int(self.lineEdit.text())
        L_X = []
        L_Y = []
        s_po = 0
        L_X.extend(df.x.tolist())
        L_Y.extend(df.y.tolist())
        s_po = len(L_X)

        # **************** creer des ambulances du hopitales **********************************************
        A_x = []
        A_y = []
        for i in range(0, int(self.lineEdit_4.text())):
            for j in range(int(self.lineEdit_5.text())):
                A_x.extend(dh.longitude_x.loc[i:i].tolist())
                A_y.extend(dh.laltitude_Y.loc[i:i].tolist())
        nb_solution = int(self.lineEdit_6.text())
        Max = int(self.lineEdit_7.text())  # par exemple
        Z = float(self.lineEdit_8.text())
        listA = []
        nb_ambu = len(A_x)  # numbre des ambulances
        # Vector du Hi
        # *****************************************************************************************
        H = [0] * s_po
        # remplir le Vector h aléatoire
        he = (1 - (int(self.lineEdit_3.text()) / s_po))
        for i in range(s_po):
            if random.random() >= float(he):
                H[i] = 1
            else:
                H[i] = 0

        # print("list du Hi : ")
        # print(H)

        # ******************************************************************

        datatest = "smaa.csv"
        header = ["f_o", "temp"]
        with open(datatest, "w", newline="") as csv_file:
            writer = csv.writer(csv_file, delimiter=",")
            writer.writerow(header)

            # boucle i_geloubale
            nb_exection = 10
            # ******************************************************************
            poids = float(self.lineEdit_9.text())
            V_I_M_O = np.full(shape=(nb_exection, Max), fill_value=0, dtype=float)
            for i_global in range(nb_exection):
                start = time.time()
                # ******************************************
                # *****************************************************************************************

                # ***********************************matriceD
                for j in range(nb_ambu):
                    list1 = [0] * s_po
                    for i in range(s_po):
                        z = math.sqrt(
                            ((L_X[i] - A_x[j]) ** 2) + (
                                    (L_Y[i] - A_y[j]) ** 2))  # distante entre pastion i et ambulances j
                        list1[i] = "{0:.3f}".format(z)
                    listA.append(list1)
                D = np.array(listA)
                D = D.astype('float64')
                # print("matric Dij:", D)

                # *****************************************************************************************
                # **********calcule f1(s)max**************************************
                F_1_max = [0] * nb_ambu
                for j in range(nb_ambu):
                    so_di = 0
                    for i in range(s_po):
                        so_di = so_di + D[j, i]
                    F_1_max[j] = so_di
                F_S_max = F_1_max[0]
                for i in range(len(F_1_max)):
                    if F_S_max > F_1_max[i]:
                        F_S_max = F_1_max[i]

                # **********calcule f2(s)max**************************************
                contH = 0
                for i in range(s_po):
                    if H[i] == 1:
                        contH = contH + 1
                F_2_max = 0
                for i in range(0, contH):
                    F_2_max = s_po - i + F_2_max
                # print("F1",F_S_max)
                # print("F2",F_2_max)
                # print("hh",contH)
                # *************************************************************************

                # ***************************************************************************************************
                #                        Vector du S
                s_po1 = s_po + 1
                Matrice_S = np.full(shape=(nb_solution, s_po1), fill_value=0,
                                    dtype=float)  # inialiser le Matrice du solution
                # *************************************************************************
                for number in range(nb_solution):
                    S = [0] * (s_po + 1)
                    for i in range(s_po):
                        S[i] = "{0:.3f}".format(random.uniform(1, nb_ambu + 0.99))  # empire le Vector Si aléatoire
                    S = np.array(S, dtype=float)

                    # print("vecteur S:", S)
                    # ************************** Vector du X **************************************
                    X = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                    for j in range(0, X.shape[1]):
                        for i in range(0, X.shape[0]):
                            f = float(S[j])
                            if i + 1 == int(f):
                                X[i, j] = 1
                            else:
                                X[i, j] = 0
                    X = X.astype('float64')
                    # print("list Xij : ",X)
                    # ******************************** Vector du Y *********************************
                    # print("matrice Yij : ")
                    Y = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                    for j in range(0, Y.shape[1]):
                        for i in range(0, Y.shape[0]):
                            f = float(S[j])
                            s = 1
                            if i + 1 == int(f):
                                for m in range(len(S)):
                                    if f < float(S[m]):
                                        if i + 1 < float(S[m]) < i + 2:
                                            s = s + 1
                                Y[i, j] = s
                            else:
                                Y[i, j] = 0

                    # print(Y)
                    # *****************************************************************************
                    s = 0
                    for j in range(0, len(X)):
                        for k in range(0, len(X[j])):
                            s = s + X[j, k] * D[j, k]
                    F1 = (s - 0) / (F_S_max - 0)

                    w_1 = poids
                    w_2 = 1 - w_1

                    # *****************************************************************************
                    F = 0
                    for j in range(len(Y)):
                        for k in range(len(Y[j])):
                            F = F + Y[j, k] * H[k]
                    F2 = (F - 0) / (F_2_max - 0)

                    S[s_po] = (w_1 * F1) + (w_2 * F2)
                    # ******************* Matrice du Solution *************************************
                    for j in range(len(S)):  # len(S) = 31
                        Matrice_S[number, j] = S[j]

                # print("Matrice du Solution : \n", Matrice_S)
                Matrice_S_avant = Matrice_S
                # print(Matrice_S)
                # *************** Trouver La Meillure Solution ****************************************

                # ************** rechercher le minimum valuer dans chaque solution en index 30

                solution_meillure = [0] * s_po1
                index = 0
                var = Matrice_S[0, s_po]
                i = 1
                while i < nb_solution:
                    if var >= Matrice_S[i, s_po]:
                        index = i
                        var = Matrice_S[i, s_po]
                        i += 1
                    else:
                        i += 1
                for k in range(0, s_po1):
                    solution_meillure[k] = Matrice_S[index, k]
                # print("solution meillure : ", solution_meillure)

                # ************** rechercher le maxim valuer dans chaque solution en index 30
                solution_mauves = [0] * s_po1

                index = 0
                var = Matrice_S[0, s_po]
                i = 1
                while i < nb_solution:
                    if var <= Matrice_S[i, s_po]:
                        index = i
                        var = Matrice_S[i, s_po]
                        i += 1
                    else:
                        i += 1
                for k in range(0, s_po1):
                    solution_mauves[k] = Matrice_S[index, k]
                # print(" solution_mauves : ", solution_mauves)
                # *************** le trai de la matrice ****************************************
                to = s_po + 1
                itra = [0] * to
                for z in range(0, nb_solution):
                    var = Matrice_S[z, s_po]
                    index = z
                    for i in range(z + 1, nb_solution):
                        if var > Matrice_S[i, s_po]:
                            index = i
                            var = Matrice_S[i, s_po]
                    for j in range(0, to):
                        itra[j] = Matrice_S[z, j]
                        Matrice_S[z, j] = Matrice_S[index, j]
                        Matrice_S[index, j] = itra[j]
                # print("matrice apre le tri ")
                # print(Matrice_S)

                # **********************************************************************************************************************************************************************

                # *************************************** SMA **************************************
                # ************** rechercher le minimum valuer dans chaque solution en index 30
                # ********* Inialiser les valeurs utilise dans algorithme SMA **********************
                t = 1
                r2 = [0] * s_po
                Vc = [0] * s_po
                Vb = [0] * s_po
                Smin = [1] * s_po
                Smin = np.array(Smin, dtype=float)
                nb_am_smax = nb_ambu + 0.99
                Smax = [nb_am_smax] * s_po
                Smax = np.array(Smax, dtype=float)
                computer_meillure = 0
                computer_mouvaise = 0
                vecteur_meillure = np.full(shape=(Max, 1), fill_value=0,
                                           dtype=float)  # ==> pour affiche le solution meillure
                vecteur_mouvais = np.full(shape=(Max, 1), fill_value=0,
                                          dtype=float)  # ==>pour affiche le solution mouvaise
                # *************** lancer recherche des solutions presque optimale *******************************
                while t <= Max:
                    for i in range(nb_solution):
                        r1 = random.uniform(0, 1)  # initialiser r1
                        if Z > r1:

                            # **** phase d'exploration *************************
                            # Mettre à jour la solution 𝑺𝒊𝒕
                            for j in range(s_po):
                                r2[j] = random.uniform(0, 1)  # initialiser r2
                                m = Smax[j] - Smin[j]  # m=Smax-Smin
                                Matrice_S[i, j] = Smin[j] + (r2[j] * m)  # St+1=Smin+r2*m
                        else:
                            # ******* phase d'exploitation *******************
                            # Calculer 𝒑𝒊
                            Sx = Matrice_S[i, s_po] - solution_meillure[s_po]  # f(Si) - f(S*)
                            Sx = math.fabs(Sx)  # |f(Si) - f(S*)|
                            pi = math.tanh(Sx)  # 𝑡𝑎𝑛ℎ|𝑓(𝑆𝑖)−𝑓(𝑆∗)|
                            r3 = random.uniform(0, 1)  # initialiser r3
                            if pi < r3:
                                # calculer Vc
                                b = 1 - (t / Max)  # initialiser b
                                for j in range(s_po):
                                    Vc[j] = random.uniform(-b, b)  # initialiser Vc
                                    Matrice_S[i, j] = Matrice_S[i, j] + Vc[j] * Matrice_S[i, j]  # St+1=Vc*St

                            else:

                                gi = ((solution_meillure[s_po] - Matrice_S[i, s_po]) / (
                                        solution_meillure[s_po] - solution_mauves[s_po])) + 1
                                # print("gi = ",gi)
                                Wi = 0
                                r = random.uniform(0, 1)  # initialiser r
                                if i < (s_po / 2):
                                    Wi = 1 + r * float(math.log(gi))  # Wi=1+rlog(gi)
                                else:
                                    Wi = 1 - r * float(math.log(gi))  # Wi=1-rlog(gi)

                                a = math.atan(1 - (t / Max))  # initialiser a
                                # ***** selection deux vecteur de facon aleatoire **
                                A = random.randint(0, nb_solution - 1)  # initialiser Sa
                                B = random.randint(0, nb_solution - 1)  # initialiser Sb
                                while A == B:
                                    B = random.randint(0, nb_solution - 1)  # si Sa = Sb
                                for j in range(s_po):
                                    Vb[j] = random.uniform(-a, a)  # initialiser Vb
                                    Matrice_S[i, j] = solution_meillure[j] + Vb[j] * (
                                            (Wi * Matrice_S[A, j]) - Matrice_S[B, j])  # St+1=S* +Vb*<(Wi*Sa-Sb)
                        # *****  traite les born de la matrice  ******
                        # empire le Vector Si aléatoire
                        for j in range(0, s_po):
                            if Matrice_S[i, j] < 1:
                                Matrice_S[i, j] = "{0:.3f}".format(random.uniform(1, int(nb_ambu / 2) + 0.99))
                            if Matrice_S[i, j] >= nb_ambu + 1:
                                Matrice_S[i, j] = "{0:.3f}".format(random.uniform(int(nb_ambu / 2) + 1, nb_ambu + 0.99))
                        # *****  remplire la matrice X  **********
                        X = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                        for j in range(0, X.shape[1]):
                            for k in range(0, X.shape[0]):
                                f = float(Matrice_S[i, j])
                                if k + 1 == int(f):
                                    X[k, j] = 1
                                else:
                                    X[k, j] = 0
                        X = X.astype('float64')
                        # print("matrice x",X)
                        # ******************************** Vector du Y *********************************
                        # print("matrice Yij : ")
                        Y = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                        for j in range(0, Y.shape[1]):
                            for k in range(0, Y.shape[0]):
                                f = float(Matrice_S[i, j])
                                s = 1
                                if k + 1 == int(f):
                                    for m in range(s_po):
                                        if f < float(Matrice_S[i, m]):
                                            if k + 1 < float(Matrice_S[i, m]) < k + 2:
                                                s = s + 1
                                    Y[k, j] = s
                                else:
                                    Y[k, j] = 0
                        # print("matrice y:",Y)
                        # *****************************************************************************
                        # *********************** fonction de chaque itira *******************************************
                        s = 0
                        for j in range(0, len(X)):
                            for k in range(0, len(X[j])):
                                s = s + X[j, k] * D[j, k]
                        F1 = (s - 0) / (F_S_max - 0)
                        w_1 = poids  # calculer les point w1  et w2
                        w_2 = 1 - w_1

                        # *****************************************************************************
                        F = 0
                        for j in range(len(Y)):
                            for k in range(len(Y[j])):
                                F = F + Y[j, k] * H[k]
                        F2 = (F - 0) / (F_2_max - 0)

                        Matrice_S[i, s_po] = (w_1 * F1) + (w_2 * F2)

                        # *************** le trai de la matrice ****************************************
                    to = s_po + 1
                    itra = [0] * to
                    for z in range(0, nb_solution):
                        var = Matrice_S[z, s_po]
                        index = z
                        for k in range(z + 1, nb_solution):
                            if var > Matrice_S[k, s_po]:
                                index = k
                                var = Matrice_S[k, s_po]
                        for j in range(0, to):
                            itra[j] = Matrice_S[z, j]
                            Matrice_S[z, j] = Matrice_S[index, j]
                            Matrice_S[index, j] = itra[j]
                    # ***********************misa misa jour**********
                    if Matrice_S[0, s_po] < solution_meillure[s_po]:
                        computer_meillure += 1
                        for k in range(s_po1):
                            solution_meillure[k] = Matrice_S[0, k]

                    ind = nb_solution - 1

                    if Matrice_S[ind, s_po] > solution_mauves[s_po]:
                        computer_mouvaise += 1
                        for j in range(s_po1):
                            solution_mauves[j] = Matrice_S[ind, j]
                    # print("**************************************************")

                    vecteur_meillure[t - 1] = solution_meillure[s_po]
                    vecteur_mouvais[t - 1] = solution_mauves[s_po]
                    t += 1

                # print("solution miellure :", solution_meillure)
                for iC in range(Max):
                    V_I_M_O[i_global, iC] = vecteur_meillure[iC]

                end = time.time()
                elapsed = end - start
                fop = float(vecteur_meillure[Max - 1])
                writer.writerow([fop, elapsed])

        # print(V_I_M_O[i_global])
        vm = np.full(shape=(Max, 1), fill_value=0, dtype=float)
        datatest = "sma.csv"
        header = ["mf_o"]
        with open(datatest, "w", newline="") as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(header)
            for jc in range(0, Max):
                sc = 0
                for ic in range(nb_exection):
                    sc = sc + V_I_M_O[ic, jc]
                sc = float(sc / 10)
                vm[jc] = sc
                writer.writerow([sc])

            # M_G_M_O[j_global, 50] = moyen
            # M_G_M_O[j_global, 51] = nb_solution
            # M_G_M_O[j_global, 52] = Max
            # M_G_M_O[j_global, 53] = Z
            # M_G_M_O[j_global, 54] = elapsed

        # print(f'Temps d\'exécution : {elapsed:.3}s')
        # ************ affiche le varible du solution meillure *********************************
        # plt.plot(vecteur_meillure, 'r')
        # plt.title('un plan du valeur fonction objective meillure and ')
        # plt.legend(['meillure'])
        # meillure = "computer meillure = " + str(computer_meillure)
        # plt.xlabel(meillure)
        # plt.show()
        # ************** Fin Programme *********************************
        # print("Temps execution est : ", (time_apres - time_avant), " seconde ")
        print("finche")
    # Lancer le Script APSO
    def APSO(self):
        df = pd.read_csv("data_aler.csv")
        dh = pd.read_csv("hopitale_set.csv")
        nb_zone = int(self.lineEdit.text())
        L_X = []
        L_Y = []
        s_po = 0
        L_X.extend(df.x.tolist())
        L_Y.extend(df.y.tolist())
        s_po = len(L_X)

        # **************** creer des ambulances du hopitales **********************************************
        A_x = []
        A_y = []
        for i in range(0, int(self.lineEdit_4.text())):
            for j in range(int(self.lineEdit_5.text())):
                A_x.extend(dh.longitude_x.loc[i:i].tolist())
                A_y.extend(dh.laltitude_Y.loc[i:i].tolist())
        nb_solution = int(self.lineEdit_6.text())
        Max = int(self.lineEdit_7.text())  # par exemple
        Z = float(self.lineEdit_8.text())
        listA = []
        nb_ambu = len(A_x)  # numbre des ambulances
        # Vector du Hi
        # *****************************************************************************************
        H = [0] * s_po
        # remplir le Vector h aléatoire
        he = (1 - (int(self.lineEdit_3.text()) / s_po))
        for i in range(s_po):
            if random.random() >= float(he):
                H[i] = 1
            else:
                H[i] = 0

        # print("list du Hi : ")
        # print(H)

        # ******************************************************************

        datatest = "APSOO.csv"
        header = ["f_o", "temp"]
        with open(datatest, "w", newline="") as csv_file:
            writer = csv.writer(csv_file, delimiter=",")
            writer.writerow(header)

            # boucle i_geloubale
            nb_exection = 10
            # ******************************************************************
            poids = float(self.lineEdit_9.text())
            V_I_M_O = np.full(shape=(nb_exection, Max), fill_value=0, dtype=float)
            for i_global in range(nb_exection):
                start = time.time()
                # ******************************************
                # *****************************************************************************************

                # ***********************************matriceD
                for j in range(nb_ambu):
                    list1 = [0] * s_po
                    for i in range(s_po):
                        z = math.sqrt(
                            ((L_X[i] - A_x[j]) ** 2) + (
                                    (L_Y[i] - A_y[j]) ** 2))  # distante entre pastion i et ambulances j
                        list1[i] = "{0:.3f}".format(z)
                    listA.append(list1)
                D = np.array(listA)
                D = D.astype('float64')
                # print("matric Dij:", D)

                # *****************************************************************************************
                # **********calcule f1(s)max**************************************
                F_1_max = [0] * nb_ambu
                for j in range(nb_ambu):
                    so_di = 0
                    for i in range(s_po):
                        so_di = so_di + D[j, i]
                    F_1_max[j] = so_di
                F_S_max = F_1_max[0]
                for i in range(len(F_1_max)):
                    if F_S_max > F_1_max[i]:
                        F_S_max = F_1_max[i]

                # **********calcule f2(s)max**************************************
                contH = 0
                for i in range(s_po):
                    if H[i] == 1:
                        contH = contH + 1
                F_2_max = 0
                for i in range(0, contH):
                    F_2_max = s_po - i + F_2_max
                # print("F1",F_S_max)
                # print("F2",F_2_max)
                # print("hh",contH)
                # *************************************************************************

                # ***************************************************************************************************
                #                        Vector du S
                s_po1 = s_po + 1
                Matrice_S = np.full(shape=(nb_solution, s_po1), fill_value=0,
                                    dtype=float)  # inialiser le Matrice du solution
                # *************************************************************************
                for number in range(nb_solution):
                    S = [0] * (s_po + 1)
                    for i in range(s_po):
                        S[i] = "{0:.3f}".format(random.uniform(1, nb_ambu + 0.99))  # empire le Vector Si aléatoire
                    S = np.array(S, dtype=float)

                    # print("vecteur S:", S)
                    # ************************** Vector du X **************************************
                    X = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                    for j in range(0, X.shape[1]):
                        for i in range(0, X.shape[0]):
                            f = float(S[j])
                            if i + 1 == int(f):
                                X[i, j] = 1
                            else:
                                X[i, j] = 0
                    X = X.astype('float64')
                    # print("list Xij : ",X)
                    # ******************************** Vector du Y *********************************
                    # print("matrice Yij : ")
                    Y = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                    for j in range(0, Y.shape[1]):
                        for i in range(0, Y.shape[0]):
                            f = float(S[j])
                            s = 1
                            if i + 1 == int(f):
                                for m in range(len(S)):
                                    if f < float(S[m]):
                                        if i + 1 < float(S[m]) < i + 2:
                                            s = s + 1
                                Y[i, j] = s
                            else:
                                Y[i, j] = 0

                    # print(Y)
                    # *****************************************************************************
                    s = 0
                    for j in range(0, len(X)):
                        for k in range(0, len(X[j])):
                            s = s + X[j, k] * D[j, k]
                    F1 = (s - 0) / (F_S_max - 0)

                    w_1 = poids
                    w_2 = 1 - w_1

                    # *****************************************************************************
                    F = 0
                    for j in range(len(Y)):
                        for k in range(len(Y[j])):
                            F = F + Y[j, k] * H[k]
                    F2 = (F - 0) / (F_2_max - 0)

                    S[s_po] = (w_1 * F1) + (w_2 * F2)
                    # ******************* Matrice du Solution *************************************
                    for j in range(len(S)):  # len(S) = 31
                        Matrice_S[number, j] = S[j]

                # print("Matrice du Solution : \n", Matrice_S)
                Matrice_S_avant = Matrice_S
                # print(Matrice_S)
                # *************** Trouver La Meillure Solution ****************************************

                # ************** rechercher le minimum valuer dans chaque solution en index 30

                solution_meillure = [0] * s_po1
                index = 0
                var = Matrice_S[0, s_po]
                i = 1
                while i < nb_solution:
                    if var >= Matrice_S[i, s_po]:
                        index = i
                        var = Matrice_S[i, s_po]
                        i += 1
                    else:
                        i += 1
                for k in range(0, s_po1):
                    solution_meillure[k] = Matrice_S[index, k]
                # print("solution meillure : ", solution_meillure)

                # ************** rechercher le maxim valuer dans chaque solution en index 30
                solution_mauves = [0] * s_po1

                index = 0
                var = Matrice_S[0, s_po]
                i = 1
                while i < nb_solution:
                    if var <= Matrice_S[i, s_po]:
                        index = i
                        var = Matrice_S[i, s_po]
                        i += 1
                    else:
                        i += 1
                for k in range(0, s_po1):
                    solution_mauves[k] = Matrice_S[index, k]
                # print(" solution_mauves : ", solution_mauves)
                # *************** le trai de la matrice ****************************************
                to = s_po + 1
                itra = [0] * to
                for z in range(0, nb_solution):
                    var = Matrice_S[z, s_po]
                    index = z
                    for i in range(z + 1, nb_solution):
                        if var > Matrice_S[i, s_po]:
                            index = i
                            var = Matrice_S[i, s_po]
                    for j in range(0, to):
                        itra[j] = Matrice_S[z, j]
                        Matrice_S[z, j] = Matrice_S[index, j]
                        Matrice_S[index, j] = itra[j]
                # print("matrice apre le tri ")
                # print(Matrice_S)

                # **********************************************************************************************************************************************************************

                # *************************************** APSO **************************************
                # ************** rechercher le minimum valuer dans chaque solution en index 30
                # ********* Inialiser les valeurs utilise dans algorithme SMA **********************
                t = 1
                Smin = [1] * s_po
                Smin = np.array(Smin, dtype=float)
                nb_am_smax = nb_ambu + 0.99
                Smax = [nb_am_smax] * s_po
                Smax = np.array(Smax, dtype=float)
                computer_meillure = 0
                computer_mouvaise = 0
                vecteur_meillure = np.full(shape=(Max, 1), fill_value=0,
                                           dtype=float)  # ==> pour affiche le solution meillure
                vecteur_mouvais = np.full(shape=(Max, 1), fill_value=0,
                                          dtype=float)  # ==>pour affiche le solution mouvaise
                # *************** lancer recherche des solutions presque optimale *******************************
                alpha_0 = 0.6
                b = 0.9
                # *************** lancer recherche des solutions presque optimale *******************************
                while (t <= Max):
                    for i in range(nb_solution):
                        y = "{0:.1f}".format(random.uniform(0, 1))
                        y = float(y)
                        list_1 = np.random.normal(0, 1, s_po)
                        alpha = alpha_0 * y
                        for j in range(s_po):
                            valeur = ((1 - b) * Matrice_S[i, j]) + (b * solution_meillure[j]) + (alpha * list_1[j])
                            if (valeur >= nb_ambu + 1):
                                valeur = "{0:.3f}".format(random.uniform(1, nb_ambu + 0.99))
                                valeur = float(valeur)
                            Matrice_S[i, j] = valeur

                            # *****  traite les born de la matrice  ******
                        # empire le Vector Si aléatoire
                        for j in range(0, s_po):
                            if Matrice_S[i, j] < 1:
                                Matrice_S[i, j] = "{0:.3f}".format(random.uniform(1, int(nb_ambu / 2) + 0.99))
                            if Matrice_S[i, j] >= nb_ambu + 1:
                                Matrice_S[i, j] = "{0:.3f}".format(random.uniform(int(nb_ambu / 2) + 1, nb_ambu + 0.99))
                        # *****  remplire la matrice X  **********
                        X = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                        for j in range(0, X.shape[1]):
                            for k in range(0, X.shape[0]):
                                f = float(Matrice_S[i, j])
                                if k + 1 == int(f):
                                    X[k, j] = 1
                                else:
                                    X[k, j] = 0
                        X = X.astype('float64')
                        # print("matrice x",X)
                        # ******************************** Vector du Y *********************************
                        # print("matrice Yij : ")
                        Y = np.full(shape=(nb_ambu, s_po), fill_value=0, dtype=float)
                        for j in range(0, Y.shape[1]):
                            for k in range(0, Y.shape[0]):
                                f = float(Matrice_S[i, j])
                                s = 1
                                if k + 1 == int(f):
                                    for m in range(s_po):
                                        if f < float(Matrice_S[i, m]):
                                            if k + 1 < float(Matrice_S[i, m]) < k + 2:
                                                s = s + 1
                                    Y[k, j] = s
                                else:
                                    Y[k, j] = 0
                        # print("matrice y:",Y)
                        # *****************************************************************************
                        # *********************** fonction de chaque itira *******************************************
                        s = 0
                        for j in range(0, len(X)):
                            for k in range(0, len(X[j])):
                                s = s + X[j, k] * D[j, k]
                        F1 = (s - 0) / (F_S_max - 0)
                        w_1 = poids  # calculer les point w1  et w2
                        w_2 = 1 - w_1

                        # *****************************************************************************
                        F = 0
                        for j in range(len(Y)):
                            for k in range(len(Y[j])):
                                F = F + Y[j, k] * H[k]
                        F2 = (F - 0) / (F_2_max - 0)

                        Matrice_S[i, s_po] = (w_1 * F1) + (w_2 * F2)

                        # *************** le trai de la matrice ****************************************
                    to = s_po + 1
                    itra = [0] * to
                    for z in range(0, nb_solution):
                        var = Matrice_S[z, s_po]
                        index = z
                        for k in range(z + 1, nb_solution):
                            if var > Matrice_S[k, s_po]:
                                index = k
                                var = Matrice_S[k, s_po]
                        for j in range(0, to):
                            itra[j] = Matrice_S[z, j]
                            Matrice_S[z, j] = Matrice_S[index, j]
                            Matrice_S[index, j] = itra[j]
                    # ***********************misa misa jour**********
                    if Matrice_S[0, s_po] < solution_meillure[s_po]:
                        computer_meillure += 1
                        for k in range(s_po1):
                            solution_meillure[k] = Matrice_S[0, k]

                    ind = nb_solution - 1

                    if Matrice_S[ind, s_po] > solution_mauves[s_po]:
                        computer_mouvaise += 1
                        for j in range(s_po1):
                            solution_mauves[j] = Matrice_S[ind, j]
                    # print("**************************************************")

                    vecteur_meillure[t - 1] = solution_meillure[s_po]
                    vecteur_mouvais[t - 1] = solution_mauves[s_po]
                    t += 1

                # print("solution miellure :", solution_meillure)
                for iC in range(Max):
                    V_I_M_O[i_global, iC] = vecteur_meillure[iC]

                end = time.time()
                elapsed = end - start
                fop = float(vecteur_meillure[Max - 1])
                writer.writerow([fop, elapsed])

        # print(V_I_M_O[i_global])
        vm = np.full(shape=(Max, 1), fill_value=0, dtype=float)
        datatest = "APSO.csv"
        header = ["mf_o"]
        with open(datatest, "w", newline="") as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(header)
            for jc in range(0, Max):
                sc = 0
                for ic in range(nb_exection):
                    sc = sc + V_I_M_O[ic, jc]
                sc = float(sc / 10)
                vm[jc] = sc
                writer.writerow([sc])

            # M_G_M_O[j_global, 50] = moyen
            # M_G_M_O[j_global, 51] = nb_solution
            # M_G_M_O[j_global, 52] = Max
            # M_G_M_O[j_global, 53] = Z
            # M_G_M_O[j_global, 54] = elapsed

        # print(f'Temps d\'exécution : {elapsed:.3}s')
        # ************ affiche le varible du solution meillure *********************************
        # plt.plot(vecteur_meillure, 'r')
        # plt.title('un plan du valeur fonction objective meillure and ')
        # plt.legend(['meillure'])
        # meillure = "computer meillure = " + str(computer_meillure)
        # plt.xlabel(meillure)
        # plt.show()
        # ************** Fin Programme *********************************
        # print("Temps execution est : ", (time_apres - time_avant), " seconde ")
        print("finche")
    # Affichage du graphe==> fonction objective entre SMA et APSO ça dépend numero itration
    def grrf1(self):
        self.figure.clear()
        g1=pd.read_csv("sma.csv")
        g2=pd.read_csv("APSO.csv")
        apso = []
        sma = []
        apso.extend(g2.mf_o.values.tolist())
        sma.extend(g1.mf_o.values.tolist())
        y1 = apso
        y2 = sma
        plt.plot(y1, label="APSO")
        plt.plot(y2, label="SMA")
        plt.legend()
        plt.title("   fonction objective entre SMA et APSO   ")
        gsma=len(sma)-1
        aa = "{0:.6f}".format(sma[gsma])
        self.textEdit.setText(str(aa))
        gpso=len(apso)-1
        ff = "{0:.6f}".format(apso[gpso])
        self.textEdit_3.setText(str(ff))
        self.canvas2.draw()
    # Affichage du graphe==> meillure fonction objective entre SMA et APSO ça dépend numro execution
    def grrf2(self):
        self.figure.clear()
        g3=pd.read_csv("smaa.csv")
        g4=pd.read_csv("APSOO.csv")
        apsoo = []
        smaa = []
        apsoo.extend(g4.temp.values.tolist())
        smaa.extend(g3.temp.values.tolist())
        y1 = apsoo
        y2 = smaa
        plt.plot(y1, label="APSO")
        plt.plot(y2, label="SMA")
        plt.legend()
        plt.title("  Titre  ")
        ggsma=0
        for i in range(len(smaa)):
            ggsma=ggsma+smaa[i]
        ggsma = "{0:.6f}".format(ggsma)
        self.textEdit_4.setText(str(ggsma)+" s")
        ggapso = 0
        for i in range(len(apsoo)):
            ggapso = ggapso + apsoo[i]
        ggapso = "{0:.6f}".format(ggapso)
        self.textEdit_2.setText(str(ggapso)+" s")

        self.canvas3.draw()


    def execution(self):
        self.SMA()
        self.APSO()
        self.grrf2()
        self.grrf1()



app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()
sys.exit(app.exec_())